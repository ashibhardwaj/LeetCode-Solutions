/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int n1 = -1, n2 = -1, p1 = -1, p2 = -1;
public:
    void depth1(TreeNode* root, int v, int d)
    {
        if(!root)
            return;
        if(root->left)
        {
            if(root->left->val == v)
            {
                p1 = root->val;
                n1 = d+1;
            }
            else
                depth1(root->left, v, d+1);
        }
        if(root->right)
        {
            if(root->right->val == v)
            {
                p1 = root->val;
                n1 = d+1;
            }
            else
                depth1(root->right, v, d+1);
        }
    }
    void depth2(TreeNode* root, int v, int d)
    {
        if(!root)
            return;
        if(root->left)
        {
            if(root->left->val == v)
            {
                p2 = root->val;
                n2 = d+1;
            }
            else
                depth2(root->left, v, d+1);
        }
        if(root->right)
        {
            if(root->right->val == v)
            {
                p2 = root->val;
                n2 = d+1;
            }
            else
                depth2(root->right, v, d+1);
        }
    }
    bool isCousins(TreeNode* root, int x, int y) {
        depth1(root, x, 0);
        depth2(root, y, 0);
        if(n1 == n2 && p1 != p2)
            return true;
        return false;
    }
};
