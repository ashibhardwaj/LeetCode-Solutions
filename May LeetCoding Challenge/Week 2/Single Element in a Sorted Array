class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        int l = 0, r = n-1;
        while(l <= r)
        {
            int mid = (l + r)/2;
            if(mid == 0)
                return nums[mid];
            else if(mid == n-1)
                return nums[mid];
            else if(nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1])
                return nums[mid];
            else if(mid % 2 == 0 && nums[mid] == nums[mid + 1])
                l = mid + 1;
            else if(mid % 2 == 0 && nums[mid] == nums[mid - 1])
                r = mid - 1;
            else if(mid % 2 != 0 && nums[mid] == nums[mid + 1])
                r = mid - 1;
            else if(mid % 2 != 0 && nums[mid] == nums[mid - 1])
                l = mid + 1;
        }
        return 0;
    }
};
