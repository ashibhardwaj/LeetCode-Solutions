class Solution {
public:
    int n,m;
    int ans=INT_MAX;
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& v,int sum=0, int i=0, int j=0)
    {
        if(i==n-1 && j==m-1)
        {
            ans=min(sum+grid[i][j], ans);
            return;
        }
        v[i][j]=1;
        if(i+1<n && !v[i+1][j])
            dfs(grid, v, sum+grid[i][j], i+1, j);
        if(j+1<m && !v[i][j+1])
            dfs(grid, v, sum+grid[i][j], i, j+1);
        v[i][j]=0;  
    }
    
    int dpsoln(vector<vector<int>>& grid)
    {
        int dp[n][m];
        dp[n-1][m-1]=grid[n-1][m-1];
        for(int i=n-1; i>=0; i--)
        {
            for(int j=m-1; j>=0; j--)
            {
                if(j+1<m && i+1<n)
                {
                    dp[i][j]=grid[i][j]+ min(dp[i+1][j], dp[i][j+1]);
                }
                else if(j+1<m)
                {
                    dp[i][j]=grid[i][j]+ dp[i][j+1];
                }
                else if(i+1<n)
                {
                    dp[i][j]=grid[i][j]+ dp[i+1][j];
                }
            }
        }
        return dp[0][0];
    }
    
    int greedy(vector<vector<int>>& grid)
    {
        for(int i=n-1; i>=0; i--)
        {
            for(int j=m-1; j>=0; j--)
            {
                if(j+1<m && i+1<n)
                {
                    grid[i][j]=grid[i][j]+ min(grid[i+1][j], grid[i][j+1]);
                }
                else if(j+1<m)
                {
                    grid[i][j]=grid[i][j]+ grid[i][j+1];
                }
                else if(i+1<n)
                {
                    grid[i][j]=grid[i][j]+ grid[i+1][j];
                }
            }
        }
        return grid[0][0];
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        n=grid.size();
        if(n==0)
            return 0;
        m=grid[0].size();
        
        //***recursive approach- O(2^(m+n)) time and O(m+n) space***
        //vector<vector<int>> v(n, vector<int>(m,0));
        //dfs(grid, v);
        //return ans;
        
        //***dp approach- O(mn) time and O(mn) space***
        //return dpsoln(grid);
        
        //***greedy approach- O(mn) time and O(1) space***
        return greedy(grid);
    }
};
