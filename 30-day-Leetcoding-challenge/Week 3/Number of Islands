class Solution {
public:
    int n,m;
    void bfs(vector<vector<char>>& grid, vector<vector<int>>& v, int x, int y)
    {
        queue<pair<int,int>>q;
        q.push(make_pair(x,y));
        while(!q.empty())
        {
            pair<int,int> p= q.front();
            q.pop();
            v[p.first][p.second]=1;
            if(p.first-1>=0 && grid[p.first-1][p.second]=='1' && !v[p.first-1][p.second])
                q.push(make_pair(p.first-1,p.second));
            if(p.first+1<n && grid[p.first+1][p.second]=='1' && !v[p.first+1][p.second])
                q.push(make_pair(p.first+1,p.second));
            if(p.second-1>=0 && grid[p.first][p.second-1]=='1' && !v[p.first][p.second-1])
                q.push(make_pair(p.first,p.second-1));
            if(p.second+1<m && grid[p.first][p.second+1]=='1' && !v[p.first][p.second+1])
                q.push(make_pair(p.first,p.second+1));
        }
        
    }
    
    void dfs(vector<vector<char>>& grid, vector<vector<int>>& v, int x, int y)
    {
        v[x][y]=1;
        if(x-1>=0 && grid[x-1][y]=='1' && !v[x-1][y])
            dfs(grid, v, x-1, y);
        if(y-1>=0 && grid[x][y-1]=='1' && !v[x][y-1])
            dfs(grid, v, x, y-1);
        if(x+1<n && grid[x+1][y]=='1' && !v[x+1][y])
            dfs(grid, v, x+1, y);
        if(y+1<m && grid[x][y+1]=='1' && !v[x][y+1])
            dfs(grid, v, x, y+1);
    }
    
    int numIslands(vector<vector<char>>& grid) {
        n=grid.size();
        if(n==0)
            return 0;
        m=grid[0].size();
        int cnt=0;
        vector <vector <int>> v(n, vector<int>(m, 0));
        for(int i=0; i<n; i++)
            for(int j=0; j<m; j++)
            {
                if(grid[i][j]=='1' && !v[i][j])
                {
                    cnt++;
                    dfs(grid, v, i, j);
                }
            }
        return cnt;
    }
};
